Nodes
  = Node*

Node
  = Include
  / Block
  / Expression
  / Plain

// Includes

Include "include"
  = IncludeSelfClosing
  / IncludeWithDefs

IncludeSelfClosing
  = tag: IncludeTagStart '/>'
  {
    return {
      type: 'include',
      file: tag.file,
      defs: []
    }
  }

IncludeWithDefs
  = tag: IncludeTagStart '>' ws* defs:Def* '</include' ws* '>'
  {
    return {
      type: 'include',
      file: tag.file,
      defs: defs
    }
  }

IncludeTagStart
  = '<include' ws+ 'file' ws* '=' ws* file:AttrValue ws*
  {
    return {
      file: file
    }
  }

// Defs

Def "definition"
  = '<' def: DefTag ':' name: VarName ws* '>'
    nodes: Nodes
    '</' _def: DefTag & { return def == _def }
    ':'
    _name: VarName & { return name == _name }
    ws* '>' ws*
  {
    return {
      type: 'def',
      mode: def,
      name: name,
      nodes: nodes
    }
  }
  
DefTag
  = 'def'
  / 'append'
  / 'prepend'

// Blocks

Block "block"
  = BlockSelfClosing
  / BlockWithContent

BlockSelfClosing
  = '<block:' name: VarName ws* '/>'
  {
    return {
      type: 'block',
      name: name,
      nodes: []
    }
  }

BlockWithContent
  = '<block:' name: VarName ws* '>'
    nodes: Nodes
    '</block:' _name: VarName & { return name == _name }
    ws* '>'
  {
    return {
      type: 'block',
      name: name,
      nodes: nodes
    }
  }

// Expression

Expression "expression"
  = EscapedExpression
  / UnescapedExpression

EscapedExpression
  = '#{' expr: $(ExpressionTokens) '}'
  {
    return {
      type: 'expr',
      escape: true,
      expr: expr
    }
  }

UnescapedExpression
  = '!{' expr: $(ExpressionTokens) '}'
  {
    return {
      type: 'expr',
      escape: false,
      expr: expr
    }
  }

ExpressionTokens
  = ExpressionToken+

ExpressionToken
  = StringLiteral
  / [^}{\n\r\u2028\u2029"']

StringLiteral "string"
  = '"' DoubleStringCharacter* '"'
  / "'" SingleStringCharacter* "'"

DoubleStringCharacter
  = !'"' !'\\' SourceCharacter
  / EscapeSequence

SingleStringCharacter
  = !"'" !'\\' SourceCharacter
  / EscapeSequence

SourceCharacter
  = [^\n\r\u2028\u2029]

EscapeSequence
  = '\\' SourceCharacter

// Plain text

Plain "plain text"
  = $(PlainToken+)

PlainToken
  = [^<#!]
  / '<' '/'?
    !'include'
    !'block'
    !'def'
    !'append'
    !'prepend'
  / [#!] !'{'

// Commons

VarName "variable name"
  = $( [a-z] [a-zA-Z0-9_]* )

AttrValue "attribute value"
  = SingleQuoteString
  / DoubleQuoteString

SingleQuoteString "string"
  = "'" chars:$([^']*) "'"
  { return chars }

DoubleQuoteString "string"
  = '"' chars:$([^"]*) '"'
  { return chars }

ws "whitespace"
  = [ \t\n\r]
